{"ast":null,"code":"import { createElement, Component, useRef, useState, useCallback, useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar ObserverMap = new Map();\nvar RootIds = new Map();\nvar rootId = 0;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\nfunction optionsToId(options) {\n  return Object.keys(options).filter(Boolean).sort().map(function (key) {\n    return key + \"_\" + (key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = ObserverMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && observer.thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    ObserverMap.set(id, instance);\n  }\n  return instance;\n}\nfunction observe(element, callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (!element) return function () {}; // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements; // Register the callback listener for this element\n\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements[\"delete\"](element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap[\"delete\"](id);\n    }\n  };\n}\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n * Monitors scroll, and triggers the children function with updated props\r\n */\n\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(InView, _React$Component);\n  function InView(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this;\n    _this.node = null;\n    _this._unobserveCb = null;\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n      _this.node = node ? node : null;\n      _this.observeNode();\n    };\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n  var _proto = InView.prototype;\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  };\n  _proto.observeNode = function observeNode() {\n    if (!this.node || this.props.skip) return;\n    var _this$props = this.props,\n      threshold = _this$props.threshold,\n      root = _this$props.root,\n      rootMargin = _this$props.rootMargin,\n      trackVisibility = _this$props.trackVisibility,\n      delay = _this$props.delay;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    });\n  };\n  _proto.unobserve = function unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  };\n  _proto.render = function render() {\n    if (!isPlainChildren(this.props)) {\n      var _this$state = this.state,\n        inView = _this$state.inView,\n        entry = _this$state.entry;\n      return this.props.children({\n        inView: inView,\n        entry: entry,\n        ref: this.handleNode\n      });\n    }\n    var _this$props2 = this.props,\n      children = _this$props2.children,\n      as = _this$props2.as,\n      tag = _this$props2.tag,\n      props = _objectWithoutPropertiesLoose(_this$props2, [\"children\", \"as\", \"tag\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\"]);\n    return /*#__PURE__*/createElement(as || tag || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  };\n  return InView;\n}(Component);\nInView.displayName = 'InView';\nInView.defaultProps = {\n  threshold: 0,\n  triggerOnce: false,\n  initialInView: false\n};\nfunction useInView(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView;\n  var unobserve = useRef();\n  var _React$useState = useState({\n      inView: !!initialInView\n    }),\n    state = _React$useState[0],\n    setState = _React$useState[1];\n  var setRef = useCallback(function (node) {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n    if (skip) return;\n    if (node) {\n      unobserve.current = observe(node, function (inView, entry) {\n        setState({\n          inView: inView,\n          entry: entry\n        });\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      });\n    }\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, delay]);\n  /* eslint-disable-next-line */\n\n  useEffect(function () {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport default InView;\nexport { InView, useInView };","map":{"version":3,"names":["ObserverMap","Map","RootIds","rootId","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","filter","Boolean","sort","map","key","createObserver","id","instance","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","thresholds","some","threshold","intersectionRatio","trackVisibility","isVisible","_elements$get","target","callback","observe","element","_createObserver","callbacks","push","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","_React$Component","_inheritsLoose","_this","call","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","undefined","observeNode","handleChange","onChange","state","_proto","prototype","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","ref","_this$props2","as","tag","_objectWithoutPropertiesLoose","createElement","_extends","Component","displayName","defaultProps","useInView","_temp","_ref","useRef","useState","_React$useState","setRef","useCallback","current","Array","isArray","useEffect","result"],"sources":["/Users/tveshashah/txshah.github.io/react-frontend-dev-portfolio/node_modules/src/observers.ts","/Users/tveshashah/txshah.github.io/react-frontend-dev-portfolio/node_modules/src/InView.tsx","/Users/tveshashah/txshah.github.io/react-frontend-dev-portfolio/node_modules/src/useInView.tsx"],"sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: Map<Element, string> = new Map();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .filter(Boolean)\n    .sort()\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          observer.thresholds.some(\n            (threshold) => entry.intersectionRatio >= threshold,\n          );\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n * Monitors scroll, and triggers the children function with updated props\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,IAAIC,GAAJ,EAApB;AASA,IAAMC,OAAO,GAAyB,IAAID,GAAJ,EAAtC;AAEA,IAAIE,MAAM,GAAG,CAAb;AAEA;;;;;AAIA,SAASC,SAATA,CAAmBC,IAAnB;EACE,IAAI,CAACA,IAAL,EAAW,OAAO,GAAP;EACX,IAAIH,OAAO,CAACI,GAAR,CAAYD,IAAZ,CAAJ,EAAuB,OAAOH,OAAO,CAACK,GAAR,CAAYF,IAAZ,CAAP;EACvBF,MAAM,IAAI,CAAV;EACAD,OAAO,CAACM,GAAR,CAAYH,IAAZ,EAAkBF,MAAM,CAACM,QAAP,EAAlB;EACA,OAAOP,OAAO,CAACK,GAAR,CAAYF,IAAZ,CAAP;AACD;AAED;;;;;;SAKgBK,YAAYC,OAAA;EAC1B,OAAOC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EACJG,MADI,CACGC,OADH,EAEJC,IAFI,GAGJC,GAHI,CAGA,UAACC,GAAD;IACH,OAAUA,GAAV,UACEA,GAAG,KAAK,MAAR,GAAiBd,SAAS,CAACO,OAAO,CAACN,IAAT,CAA1B,GAA2CM,OAAO,CAACO,GAAD,CADpD;EAGD,CAPI,EAQJT,QARI,EAAP;AASD;AAED,SAASU,cAATA,CAAwBR,OAAxB;EACE;EACA,IAAIS,EAAE,GAAGV,WAAW,CAACC,OAAD,CAApB;EACA,IAAIU,QAAQ,GAAGrB,WAAW,CAACO,GAAZ,CAAgBa,EAAhB,CAAf;EAEA,IAAI,CAACC,QAAL,EAAe;IACb;IACA,IAAMC,QAAQ,GAAG,IAAIrB,GAAJ,EAAjB;IAEA,IAAMsB,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,UAACC,OAAD;MACxCA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD;;;QACd;QACA;QACA,IAAMC,MAAM,GACVD,KAAK,CAACE,cAAN,IACAN,QAAQ,CAACO,UAAT,CAAoBC,IAApB,CACE,UAACC,SAAD;UAAA,OAAeL,KAAK,CAACM,iBAAN,IAA2BD,SAA1C;QAAA,CADF,CAFF;;QAOA,IAAIrB,OAAO,CAACuB,eAAR,IAA2B,OAAOP,KAAK,CAACQ,SAAb,KAA2B,WAA1D,EAAuE;UACrE;UACA;UACAR,KAAK,CAACQ,SAAN,GAAkBP,MAAlB;QACD;QAED,CAAAQ,aAAA,GAAAd,QAAQ,CAACf,GAAT,CAAaoB,KAAK,CAACU,MAAnB,sBAAAD,aAAA,CAA4BV,OAA5B,CAAoC,UAACY,QAAD;UAClCA,QAAQ,CAACV,MAAD,EAASD,KAAT,CAAR;QACD,CAFD;MAGD,CAnBD;IAoBD,CArBgB,EAqBdhB,OArBc,CAAjB;IAuBAU,QAAQ,GAAG;MACTD,EAAE,EAAFA,EADS;MAETG,QAAQ,EAARA,QAFS;MAGTD,QAAQ,EAARA;IAHS,CAAX;IAMAtB,WAAW,CAACQ,GAAZ,CAAgBY,EAAhB,EAAoBC,QAApB;EACD;EAED,OAAOA,QAAP;AACD;SAEekB,QACdC,OAAA,EACAF,QAAA,EACA3B,OAAA;MAAAA,OAAA;IAAAA,OAAA,GAAoC;;EAEpC,IAAI,CAAC6B,OAAL,EAAc,OAAO,cAAP;;wBAEqBrB,cAAc,CAACR,OAAD;IAAzCS,EAAA,GAAAqB,eAAA,CAAArB,EAAA;IAAIG,QAAA,GAAAkB,eAAA,CAAAlB,QAAA;IAAUD,QAAA,GAAAmB,eAAA,CAAAnB,QAAA;;EAGtB,IAAIoB,SAAS,GAAGpB,QAAQ,CAACf,GAAT,CAAaiC,OAAb,KAAyB,EAAzC;EACA,IAAI,CAAClB,QAAQ,CAAChB,GAAT,CAAakC,OAAb,CAAL,EAA4B;IAC1BlB,QAAQ,CAACd,GAAT,CAAagC,OAAb,EAAsBE,SAAtB;EACD;EAEDA,SAAS,CAACC,IAAV,CAAeL,QAAf;EACAf,QAAQ,CAACgB,OAAT,CAAiBC,OAAjB;EAEA,OAAO,SAASI,SAATA,CAAA;IACL;IACAF,SAAS,CAACG,MAAV,CAAiBH,SAAS,CAACI,OAAV,CAAkBR,QAAlB,CAAjB,EAA8C,CAA9C;IAEA,IAAII,SAAS,CAACK,MAAV,KAAqB,CAAzB,EAA4B;MAC1B;MACAzB,QAAQ,UAAR,CAAgBkB,OAAhB;MACAjB,QAAQ,CAACqB,SAAT,CAAmBJ,OAAnB;IACD;IAED,IAAIlB,QAAQ,CAAC0B,IAAT,KAAkB,CAAtB,EAAyB;MACvB;MACAzB,QAAQ,CAAC0B,UAAT;MACAjD,WAAW,UAAX,CAAmBoB,EAAnB;IACD;EACF,CAfD;AAgBD;ACjHD,SAAS8B,eAATA,CACEC,KADF;EAGE,OAAO,OAAOA,KAAK,CAACC,QAAb,KAA0B,UAAjC;AACD;AAED;;;;AAGA,IAAaC,MAAb,0BAAAC,gBAAA;EAAAC,cAAA,CAAAF,MAAA,EAAAC,gBAAA;EAWE,SAAAD,OAAYF,KAAZ;;IACEK,KAAA,GAAAF,gBAAA,CAAAG,IAAA,OAAMN,KAAN;IA2BFK,KAAA,CAAAE,IAAA,GAAuB,IAAvB;IACAF,KAAA,CAAAG,YAAA,GAAoC,IAApC;IAwBAH,KAAA,CAAAI,UAAA,GAAa,UAACF,IAAD;MACX,IAAIF,KAAA,CAAKE,IAAT,EAAe;QACb;QACAF,KAAA,CAAKZ,SAAL;QAEA,IAAI,CAACc,IAAD,IAAS,CAACF,KAAA,CAAKL,KAAL,CAAWU,WAArB,IAAoC,CAACL,KAAA,CAAKL,KAAL,CAAWW,IAApD,EAA0D;UACxD;UACAN,KAAA,CAAKO,QAAL,CAAc;YAAEnC,MAAM,EAAE,CAAC,CAAC4B,KAAA,CAAKL,KAAL,CAAWa,aAAvB;YAAsCrC,KAAK,EAAEsC;UAA7C,CAAd;QACD;MACF;MACDT,KAAA,CAAKE,IAAL,GAAYA,IAAI,GAAGA,IAAH,GAAU,IAA1B;MACAF,KAAA,CAAKU,WAAL;IACD,CAZD;IAcAV,KAAA,CAAAW,YAAA,GAAe,UAACvC,MAAD,EAAkBD,KAAlB;MACb,IAAIC,MAAM,IAAI4B,KAAA,CAAKL,KAAL,CAAWU,WAAzB,EAAsC;QACpC;QACAL,KAAA,CAAKZ,SAAL;MACD;MACD,IAAI,CAACM,eAAe,CAACM,KAAA,CAAKL,KAAN,CAApB,EAAkC;QAChC;QACA;QACAK,KAAA,CAAKO,QAAL,CAAc;UAAEnC,MAAM,EAANA,MAAF;UAAUD,KAAK,EAALA;QAAV,CAAd;MACD;MACD,IAAI6B,KAAA,CAAKL,KAAL,CAAWiB,QAAf,EAAyB;QACvB;QACAZ,KAAA,CAAKL,KAAL,CAAWiB,QAAX,CAAoBxC,MAApB,EAA4BD,KAA5B;MACD;IACF,CAdD;IAjEE6B,KAAA,CAAKa,KAAL,GAAa;MACXzC,MAAM,EAAE,CAAC,CAACuB,KAAK,CAACa,aADL;MAEXrC,KAAK,EAAEsC;IAFI,CAAb;;EAID;EAjBH,IAAAK,MAAA,GAAAjB,MAAA,CAAAkB,SAAA;EAAAD,MAAA,CAmBEE,kBAnBF,GAmBE,SAAAA,mBAAmBC,SAAnB;IACE;IACA,IACEA,SAAS,CAACC,UAAV,KAAyB,KAAKvB,KAAL,CAAWuB,UAApC,IACAD,SAAS,CAACpE,IAAV,KAAmB,KAAK8C,KAAL,CAAW9C,IAD9B,IAEAoE,SAAS,CAACzC,SAAV,KAAwB,KAAKmB,KAAL,CAAWnB,SAFnC,IAGAyC,SAAS,CAACX,IAAV,KAAmB,KAAKX,KAAL,CAAWW,IAH9B,IAIAW,SAAS,CAACvC,eAAV,KAA8B,KAAKiB,KAAL,CAAWjB,eAJzC,IAKAuC,SAAS,CAACE,KAAV,KAAoB,KAAKxB,KAAL,CAAWwB,KANjC,EAOE;MACA,KAAK/B,SAAL;MACA,KAAKsB,WAAL;IACD;EACF,CAhCH;EAAAI,MAAA,CAkCEM,oBAlCF,GAkCE,SAAAA,qBAAA;IACE,KAAKhC,SAAL;IACA,KAAKc,IAAL,GAAY,IAAZ;EACD,CArCH;EAAAY,MAAA,CA0CEJ,WA1CF,GA0CE,SAAAA,YAAA;IACE,IAAI,CAAC,KAAKR,IAAN,IAAc,KAAKP,KAAL,CAAWW,IAA7B,EAAmC;sBAC6B,KAAKX,KAAA;MAA7DnB,SAAA,GAAA6C,WAAA,CAAA7C,SAAA;MAAW3B,IAAA,GAAAwE,WAAA,CAAAxE,IAAA;MAAMqE,UAAA,GAAAG,WAAA,CAAAH,UAAA;MAAYxC,eAAA,GAAA2C,WAAA,CAAA3C,eAAA;MAAiByC,KAAA,GAAAE,WAAA,CAAAF,KAAA;IAEtD,KAAKhB,YAAL,GAAoBpB,OAAO,CAAC,KAAKmB,IAAN,EAAY,KAAKS,YAAjB,EAA+B;MACxDnC,SAAS,EAATA,SADwD;MAExD3B,IAAI,EAAJA,IAFwD;MAGxDqE,UAAU,EAAVA,UAHwD;MAIxD;MACAxC,eAAe,EAAfA,eALwD;MAMxD;MACAyC,KAAK,EAALA;IAPwD,CAA/B,CAA3B;EASD,CAvDH;EAAAL,MAAA,CAyDE1B,SAzDF,GAyDE,SAAAA,UAAA;IACE,IAAI,KAAKe,YAAT,EAAuB;MACrB,KAAKA,YAAL;MACA,KAAKA,YAAL,GAAoB,IAApB;IACD;EACF,CA9DH;EAAAW,MAAA,CA8FEQ,MA9FF,GA8FE,SAAAA,OAAA;IACE,IAAI,CAAC5B,eAAe,CAAC,KAAKC,KAAN,CAApB,EAAkC;MAAA,IAAA4B,WAAA,GACN,KAAKV,KADC;QACxBzC,MADwB,GAAAmD,WAAA,CACxBnD,MADwB;QAChBD,KADgB,GAAAoD,WAAA,CAChBpD,KADgB;MAEhC,OAAO,KAAKwB,KAAL,CAAWC,QAAX,CAAoB;QAAExB,MAAM,EAANA,MAAF;QAAUD,KAAK,EAALA,KAAV;QAAiBqD,GAAG,EAAE,KAAKpB;MAA3B,CAApB,CAAP;IACD;uBAgBG,KAAKT,KAAA;MAbPC,QAAA,GAAA6B,YAAA,CAAA7B,QAAA;MACA8B,EAAA,GAAAD,YAAA,CAAAC,EAAA;MACAC,GAAA,GAAAF,YAAA,CAAAE,GAAA;MACAhC,KASG,GAAAiC,6BAAA,CAAAH,YAAA;IAGL,oBAAOI,aAAA,CACLH,EAAE,IAAIC,GAAN,IAAa,KADR,EAAAG,QAAA;MAEHN,GAAG,EAAE,KAAKpB;IAFP,GAEsBT,KAFtB,GAGLC,QAHK,CAAP;EAKD,CAzHH;EAAA,OAAAC,MAAA;AAAA,EAA4BkC,SAA5B;AAISlC,MAAA,CAAAmC,WAAA,GAAc,QAAd;AACAnC,MAAA,CAAAoC,YAAA,GAAe;EACpBzD,SAAS,EAAE,CADS;EAEpB6B,WAAW,EAAE,KAFO;EAGpBG,aAAa,EAAE;AAHK,CAAf;SCbO0B,UAAAC,KAAA;gCASS,KAAAA,KAAA;IARvB3D,SAAA,GAAA4D,IAAA,CAAA5D,SAAA;IACA2C,KAAA,GAAAiB,IAAA,CAAAjB,KAAA;IACAzC,eAAA,GAAA0D,IAAA,CAAA1D,eAAA;IACAwC,UAAA,GAAAkB,IAAA,CAAAlB,UAAA;IACArE,IAAA,GAAAuF,IAAA,CAAAvF,IAAA;IACAwD,WAAA,GAAA+B,IAAA,CAAA/B,WAAA;IACAC,IAAA,GAAA8B,IAAA,CAAA9B,IAAA;IACAE,aAAA,GAAA4B,IAAA,CAAA5B,aAAA;EAEA,IAAMpB,SAAS,GAAGiD,MAAA,EAAlB;wBAC0BC,QAAA,CAAsB;MAC9ClE,MAAM,EAAE,CAAC,CAACoC;IADoC,CAAtB;IAAnBK,KAAA,GAAA0B,eAAA;IAAOhC,QAAA,GAAAgC,eAAA;EAId,IAAMC,MAAM,GAAGC,WAAA,CACb,UAACvC,IAAD;IACE,IAAId,SAAS,CAACsD,OAAV,KAAsBjC,SAA1B,EAAqC;MACnCrB,SAAS,CAACsD,OAAV;MACAtD,SAAS,CAACsD,OAAV,GAAoBjC,SAApB;IACD;;IAGD,IAAIH,IAAJ,EAAU;IAEV,IAAIJ,IAAJ,EAAU;MACRd,SAAS,CAACsD,OAAV,GAAoB3D,OAAO,CACzBmB,IADyB,EAEzB,UAAC9B,MAAD,EAASD,KAAT;QACEoC,QAAQ,CAAC;UAAEnC,MAAM,EAANA,MAAF;UAAUD,KAAK,EAALA;QAAV,CAAD,CAAR;QAEA,IAAIA,KAAK,CAACE,cAAN,IAAwBgC,WAAxB,IAAuCjB,SAAS,CAACsD,OAArD,EAA8D;UAC5D;UACAtD,SAAS,CAACsD,OAAV;UACAtD,SAAS,CAACsD,OAAV,GAAoBjC,SAApB;QACD;MACF,CAVwB,EAWzB;QACE5D,IAAI,EAAJA,IADF;QAEEqE,UAAU,EAAVA,UAFF;QAGE1C,SAAS,EAATA,SAHF;QAIE;QACAE,eAAe,EAAfA,eALF;QAME;QACAyC,KAAK,EAALA;MAPF,CAXyB,CAA3B;IAqBD;EACF,CAjCY;EAAA;EAmCb;EACA;EAAA;EAEE;EACAwB,KAAK,CAACC,OAAN,CAAcpE,SAAd,IAA2BA,SAAS,CAACvB,QAAV,EAA3B,GAAkDuB,SAHpD,EAIE3B,IAJF,EAKEqE,UALF,EAMEb,WANF,EAOEC,IAPF,EAQE5B,eARF,EASEyC,KATF,CApCa,CAAf;EAiDA;;EACA0B,SAAS,CAAC;IACR,IAAI,CAACzD,SAAS,CAACsD,OAAX,IAAsB7B,KAAK,CAAC1C,KAA5B,IAAqC,CAACkC,WAAtC,IAAqD,CAACC,IAA1D,EAAgE;MAC9D;MACA;MACAC,QAAQ,CAAC;QACPnC,MAAM,EAAE,CAAC,CAACoC;MADH,CAAD,CAAR;IAGD;EACF,CARQ,CAAT;EAUA,IAAMsC,MAAM,GAAG,CAACN,MAAD,EAAS3B,KAAK,CAACzC,MAAf,EAAuByC,KAAK,CAAC1C,KAA7B,CAAf;;EAGA2E,MAAM,CAACtB,GAAP,GAAasB,MAAM,CAAC,CAAD,CAAnB;EACAA,MAAM,CAAC1E,MAAP,GAAgB0E,MAAM,CAAC,CAAD,CAAtB;EACAA,MAAM,CAAC3E,KAAP,GAAe2E,MAAM,CAAC,CAAD,CAArB;EAEA,OAAOA,MAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}